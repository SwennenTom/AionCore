// <auto-generated />
using System;
using AionCoreBot.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AionCoreBot.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250622190733_SavingSignalResults")]
    partial class SavingSignalResults
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("AionCoreBot.Domain.Models.ATRResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ATRResults");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.Candle", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QuoteVolume")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Interval", "OpenTime");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.EMAResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EMAResults");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceptionDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("LogLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceComponent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.RSIResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RSIResults");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.SignalEvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnalyzerName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EvaluationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("IndicatorValues")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProposedAction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalDescriptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("WasContradicted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SignalEvaluations");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerOrderReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientOrderId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ClosePrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryAction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ExchangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExitAction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaidFee")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProfitLoss")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("AionCoreBot.Domain.Models.TradeDecision", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interval")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DecisionTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SuggestedPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Interval", "DecisionTime");

                    b.ToTable("TradeDecisions");
                });
#pragma warning restore 612, 618
        }
    }
}
